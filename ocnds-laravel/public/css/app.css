/*OCNDS stylesheet*/

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    background-color: white;
}

* {
    font-family: 'Work Sans', Roboto, sans-serif;
}

:root {
    --accent: #4A30EB;
    --accent2: #F3DA00;
    /** need an accent3 that is more legible on white background */
    --dark-accent: #0E0064;

}

h1,
h2,
h3 {
    font-family: 'Kode Mono', monospace;
}

h3 {
    font-size: 1.2rem;
}

p {
    font-size: 0.85rem;
    line-height: 1.6;
    padding: 10px 0;
}

a {
    text-decoration: none;
    color: inherit;
}

a:visited {
    color: var(--accent2);
}

#app {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}



/*----HEADER------*/
header {
    background-color: var(--accent);
    color: white;
    padding: 25px 30px;
}

.title {
    display: flex;
    align-items: center;
    padding: 0;
}

.main-title {
    font-size: 5rem;
    font-weight: 700;
    line-height: 1;
}

.title2 {
    font-size: 1rem;
    font-weight: 400;
}

.subtitle {
    color: var(--accent2);
    font-size: 0.8rem;
}

input[type="search"] {
    padding: 10px;
    border: 1px solid var(--accent2);
    border-radius: 5px;
    margin: 10px 0;
    width: 100%;
}

button[type="submit"] {
    padding: 10px;
    border: 1px solid var(--accent2);
    border-radius: 5px;
    margin: 0px 0x 10px 0;
    width: 100%;
    background-color: var(--accent2);
    color: var(--accent);
    cursor: pointer;
}



.filter label {
    font-size: 0.8rem;
    color: var(--dark-accent);
    cursor: pointer;
}

/* .data contains a table, which i want to be responsive */

.data {
    transition: 0.3s ease-in-out;
    position: relative;
    height: auto;
}

.data:has(table) {
    transition: 0.3s ease-in-out;
}

/** the container now needs to be responsive so the table scrolls horizontally within it */

.data table {
    border-collapse: collapse;
    width: 100%;
}

.data .table-wrapper {
    max-width: 1200px;
    overflow-x: auto;
}

/* #scrollLeft and #scrollRight are buttons that allow the user to scroll the table left and right and they should be 
fixed in the left and the right of the screen respectively */

.table-scroller {
    position: sticky;
    top: 0;
}

.table-scroller .btn-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
    z-index: 1000;
    width: 100%;
}

.table-scroller button {
    background-color: var(--accent2);
    color: var(--accent);
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
}


#scrollLeft,
#scrollRight {
    background-color: var(--accent2);
    color: var(--accent);
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
    z-index: 1000;
}

#scrollLeft:hover,
#scrollRight:hover {
    background-color: var(--accent);
    color: white;
}




.data h3 {
    color: var(--accent2);
    font-size: 1.2rem;
    margin: 20px 0;
}



.data table {
    border-collapse: collapse;
    width: 100%;

    margin-top: 20px;
}

.data th {
    background-color: var(--accent2);
    color: var(--dark-accent);
    font-size: 0.8rem;
    padding: 10px;
    text-align: left;
    text-transform: uppercase;
}

.data td {
    border-bottom: 1px solid var(--accent2);
    color:#d9d8dd;
    padding: 10px;
}

.data tr:nth-child(even) {
    background-color: #f2f2f2;

}

.data tr:nth-child(even) td {
    color:#0E0064;
}


.data tr:hover, .data tr:hover td {
    background-color: var(--accent2);
    color:#0E0064;
}

/** sometimes, data will contain a grid of div.card instead of a table, inside a wrapper div.card-container */

.data .card-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 2fr));
    gap: 20px;
    margin-top: 20px;
}

.data .card {
    background-color: white;
    border: 1px solid var(--accent2);
    border-radius: 5px;
}

.data .card img {
    width: 100%;
    height: auto;
    border-radius: 5px;
}

.data .card h5 {
    font-size: 1rem;
    color: var(--dark-accent);
    text-transform: uppercase;
    margin: 10px 0;
}

.data .card p {
    font-size: 0.8rem;
    color: var(--dark-accent);
    margin: 10px 0;
}

.data .card a {
    color: var(--accent);
    font-size: 0.8rem;
    text-decoration: none;
}

.data .card a:hover {
    color: var(--accent2);
}

.data .card dl {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 10px;
    margin: 10px 0;
}

.data .card dt {
    font-size: 0.8rem;
    color: var(--dark-accent);
    color: var(--accent2);
    background-color: #0E0064;
    padding: 5px;;
    border:1px solid transparent;
    cursor: pointer;
}

.data .card dd {
    font-size: 0.7rem;
    color: var(--dark-accent);
    padding: 5px;
    word-break: break-all;

}

/** hover accent on dt and adjacent dd */
.data .card dt:hover {
    border-bottom: 1px dashed var(--accent);
}



/*----MAIN------*/



main {
    background: #f5f5f5;
}



/*----SIDEBAR------*/

aside {
    padding: 0;
    display: flex;
    flex-direction: column;
    border: 3px solid var(--dark-accent);
}

/** aside has two <section> elements, one for filters and one for credits, which i want to be side by side on desktop, but take up the same height as each other **/

aside {
    display: flex;
    flex-direction: row;
}

aside > section {
    flex: 1;
}

.filter {
    margin-bottom: 20px;
}

.credits>h3 {
    color: var(--accent2);
}

.credits {
    padding: 20px;
    background-color: var(--dark-accent);
    color: white;
}

.btn-group {
    display: flex;
    flex-direction: row;
    gap: 20px;
    font-size: 0.9rem;
}

.btn-primary {
    color: white;
    background-color: var(--accent);
    text-decoration: none;
    padding: 10px 15px;
}

.btn.active {
    background-color: var(--accent2);
    color: var(--accent);
}

.btn:hover {
    background-color: var(--accent2);
    color: var(--accent);
}

.btn-secondary {
    background-color: var(--dark-accent);
}

.btn-secondary:hover {
    background-color: var(--accent2);
    color: var(--accent);
}

.btn-secondary.active {
    background-color: var(--accent2);
    color: var(--accent);
}


.description>h3 {
    color: var(--accent);
}

.description {
    padding: 20px;
    background-color: var(--accent2);
}

/*-----SEARCH BAR-----*/

.search-bar {
    background-color: #d9d8dd;
    padding: 20px;
}


/*----FILTERS------*/
.filter-wrapper {
    padding: 20px;
    background-color: #F5F3FF;
}

.filter-wrap .filter {
    margin: 10px 0;
}



/*----TABLE DATA ------*/

.table-wrapper {
    overflow-x: auto;
}


/*----we could do something like this for table responsiveness? 
https://codepen.io/AllThingsSmitty/pen/MyqmdM */





/*
/*----TABLET STYLING----*/



/*-----DESKTOP STYLING-----*/

/* Define the keyframes for the fly-in animations */
@keyframes flyInLeft {
    0% {
        transform: translateX(-100%);
        opacity: 0;
    }
    100% {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes flyInRight {
    0% {
        transform: translateX(100%);
        opacity: 0;
    }
    100% {
        transform: translateX(0);
        opacity: 1;
    }
}

/* Apply the animations to the cards */
.data .col-md-4:nth-child(odd) .card {
    animation: flyInLeft 0.8s ease-out forwards;
}

.data .col-md-4:nth-child(even) .card {
    animation: flyInRight 0.8s ease-out forwards;
}

/* Add a little delay between each card to make the effect more staggered */
.data .col-md-4:nth-child(2n) .card {
    animation-delay: 0.2s;
}

.data .col-md-4:nth-child(2n+1) .card {
    animation-delay: 0.4s;
}



